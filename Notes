What is OOP (Object Oriented Programming) ?
-> is a programming paradigm, it means that is a set of rules and ideas and concepts, it is basically a standard in programming that we use to solve a specific type of problem. There are other programming paradigms as well. EACH TYPE OF PROBLEM HAS A SPECIFIC PARADIGM. 
exemple : as a car, as an entity in real life has different attributes and characteristics and the idea of OOP is to be able to represent that car from real life in your program.
---------------------------------------------------------------------------
By using classes :
-> Is building block of objects oriented programming, it basically user-defined data-type.

How to build a class : 

using namespace std;

class Employee {
    string Name;
    string Company;
    int    Age;
}; THESE MEMBERS ARE PRIVATE BY DEFAULT !!!

in C++, we have 3 access modifiers :
- private : whatever is private in your class that is not going to be accessible outside of your class that is going to be hidden
- public : you will be able to access that outside of your class as well, anyone outside of your class is going to be able to access public members.
- protected : is somewhere in between public and private and it has certain rules to it. We will start talking about protected access modifier in INHERITANCE.

class Employee {
public:
    string Name;
    string Company;
    int    Age;
    void    Introduction()
    {
        cout << "Name :" << Name << endl;
        cout << "Company :" << Company << endl;
        cout << "Age :" << Age << endl;
    }
private:
    int index;
protected:
    int something;
};

Class method is a function inside the class.

There is a better way to construct our objects and in order to do that we will use a CONSTRUCTOR. 
-> Constructor is a special type of method that is invoked each time that an object of a class is created.
-> THERE IS A DEFAULT CONSTRUCTOR THAT IS AUTOMATICALLY GENERATED BY YOUR COMPILER. 
--> There are 3 rules you have to respect in your constructor :
* A constructor doesn't have a return type.
* A constructor should have the same name as the class 
* A constructor must be public.

class Employee {
public:
    string Name;
    string Company;
    int    Age;
    void    Introduction()
    {
        cout << "Name :" << Name << endl;
        cout << "Company :" << Company << endl;
        cout << "Age :" << Age << endl;
    }
    Employee(string name, string company, int age) // constructor
    {
        Name = name;
        Company = company;
        Age = age;
    }
private:
    int index;
protected:
    int something;
};

Exemple :
    Employee employee1 = employee("7md", "amazon", 25);

---->Encapsulation :
->Bunding or tying together data and methods that operate on that data so that they are grouped within a class. We do this with the purpose of preventing anyone or anything outside our class to be able to directly access our data and to interact with it and to modify it. 
These methods are very often implemented as getters and setters.
Exemple :

class Employee {
private:
    string Name;
    string Company;
    int    Age;
public:
    void    setName(string name)
    {
        Name = name;
    }
    string  getName()
    {
        return Name;
    }
    void    setcompany(string company)
    {
        Company = company;
    }
    string  getcompany()
    {
        return Company;
    }
    void    setAge(int age)
    {
        Age = age;
    }
    int  getAge()
    {
        return Age;
    }
    void    Introduction()
    {
        cout << "Name :" << Name << endl;
        cout << "Company :" << Company << endl;
        cout << "Age :" << Age << endl;
    }
    Employee(string name, string company, int age) // constructor
    {
        Name = name;
        Company = company;
        Age = age;
    }
private:
    int index;
protected:
    int something;
};

Employee employ1;
employ1.setAge(39);
cout << employ1.getAge() << " is " << endl;
-> We can apply some certain validation rules to your setter methods
std :: cout | stands for standard Character output
<< | insertion operator which indicates that what follows is inserted into std :: cout.


Member Functions                            Static Member Functions
------------------------------------------------------------------------------
1. Associated with objects of the class    || 1. Associated with the class itself
2. Access instance-specific data           || 2. Cannot access instance-specific data
3. Called using object instance            || 3. Called using class name
4. Accessible through object               || 4. Accessible without object instantiation
5. Can be virtual                          || 5. Cannot be virtual
6. Can access both static and non-static   || 6. Can only access static member variables
   member variables
7. Invoked through object pointers         || 7. Invoked through class name or object pointers
8. Can be overloaded                       || 8. Can be overloaded
9. Implicit 'this' pointer available       || 9. No 'this' pointer available
10. Invokes dynamic binding (polymorphism) || 10. Invokes static binding (no polymorphism)
11. Lifetime tied to object's lifetime     || 11. Lifetime independent of object's lifetime
12. Can modify non-static member variables || 12. Cannot modify non-static member variables

